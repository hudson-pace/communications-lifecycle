@page "/posts/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorWebApp.Data.BlazorWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Post</h2>
    <hr />
    @if (post is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10">@post.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Content</dt>
            <dd class="col-sm-10">@post.Content</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedAt</dt>
            <dd class="col-sm-10">@post.CreatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@post.UpdatedAt</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Upvotes</dt>
            <dd class="col-sm-10">@post.Upvotes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Downvotes</dt>
            <dd class="col-sm-10">@post.Downvotes</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">IsEdited</dt>
            <dd class="col-sm-10">@post.IsEdited</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Tags</dt>
            <dd class="col-sm-10">@post.Tags</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AuthorId</dt>
            <dd class="col-sm-10">@post.AuthorId</dd>
        </dl>
        <EditForm method="post" Model="post" OnValidSubmit="DeletePost" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(post is null)">Delete</button> |
            <a href="/posts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Post? post;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        post = await context.Post.FirstOrDefaultAsync(m => m.Id == Id);

        if (post is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePost()
    {
        using var context = DbFactory.CreateDbContext();
        context.Post.Remove(post!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/posts");
    }
}
