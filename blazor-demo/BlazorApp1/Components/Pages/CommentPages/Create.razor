@page "/comments/create"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorWebApp.Data.BlazorWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Comment</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Comment" OnValidSubmit="AddComment" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="content" class="form-label">Content:</label> 
                <InputText id="content" @bind-Value="Comment.Content" class="form-control" /> 
                <ValidationMessage For="() => Comment.Content" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdat" class="form-label">CreatedAt:</label> 
                <InputDate id="createdat" @bind-Value="Comment.CreatedAt" class="form-control" /> 
                <ValidationMessage For="() => Comment.CreatedAt" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedat" class="form-label">UpdatedAt:</label> 
                <InputDate id="updatedat" @bind-Value="Comment.UpdatedAt" class="form-control" /> 
                <ValidationMessage For="() => Comment.UpdatedAt" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="upvotes" class="form-label">Upvotes:</label> 
                <InputNumber id="upvotes" @bind-Value="Comment.Upvotes" class="form-control" /> 
                <ValidationMessage For="() => Comment.Upvotes" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="downvotes" class="form-label">Downvotes:</label> 
                <InputNumber id="downvotes" @bind-Value="Comment.Downvotes" class="form-control" /> 
                <ValidationMessage For="() => Comment.Downvotes" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="isedited" class="form-label">IsEdited:</label> 
                <InputCheckbox id="isedited" @bind-Value="Comment.IsEdited" class="form-check-input" /> 
                <ValidationMessage For="() => Comment.IsEdited" class="text-danger" /> 
            </div>        
            @*
            <div class="mb-3">
                <label for="authorid" class="form-label">AuthorId:</label> 
                <InputText id="authorid" @bind-Value="Comment.AuthorId" class="form-control" /> 
                <ValidationMessage For="() => Comment.AuthorId" class="text-danger" /> 
            </div>*@        
            <div class="mb-3">
                <label for="postid" class="form-label">PostId:</label> 
                <InputNumber id="postid" @bind-Value="Comment.PostId" class="form-control" /> 
                <ValidationMessage For="() => Comment.PostId" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/comments">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Comment Comment { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddComment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Comments.Add(Comment);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/comments");
    }
}
