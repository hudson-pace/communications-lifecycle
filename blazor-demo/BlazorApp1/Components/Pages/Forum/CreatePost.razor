@page "/forum/posts/create"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@using BlazorApp1.DTO;
@using Microsoft.AspNetCore.Components;
@using BlazorApp1.Services;
@using System.Security.Claims;
@inject IDbContextFactory<BlazorWebApp.Data.BlazorWebAppContext> DbFactory
@inject NavigationManager NavigationManager
@inject IForumPostService ForumPostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserProfileService UserProfileService;
@rendermode InteractiveServer

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Post</h2>
<hr />
@if (!_user.Identity.IsAuthenticated)
{
    <p>Sign in to create a post.</p>
} else {
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Post" OnValidSubmit="AddPost" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert"/>
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label> 
                    <InputText id="title" @bind-Value="Post.Title" class="form-control" /> 
                    <ValidationMessage For="() => Post.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="content" class="form-label">Content:</label> 
                    <InputText id="content" @bind-Value="Post.Content" class="form-control" /> 
                    <ValidationMessage For="() => Post.Content" class="text-danger" /> 
                </div>
                <div class="mb-3">
                    <label class="form-label">Tags:</label>
                    @for (int i = 0; i < Post.PostTags.Count; i++) 
                    {
                        int index = i;
                        <InputText @bind-Value="Post.PostTags[index]" class="form-control" />
                    }
                    <button type="button" @onclick="HandleClick">Add Tag</button>
                </div>
                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>

        </div>
    </div>
}

<div>
    <a href="/forum">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private PostCreateDto Post { get; set; } = new();
    private ClaimsPrincipal _user;
    private UserProfile _userProfile;

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPost()
    {
        Post.AuthorId = _userProfile.UserProfileId;
        await ForumPostService.Create(Post);
        NavigationManager.NavigateTo("/forum");
    }
    protected override void OnParametersSet()
    {
        Post.PostTags ??= new();
    }
    private void HandleClick()
    {
        Post.PostTags.Add(string.Empty);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User;
        _userProfile = await UserProfileService.GetAsync();
    }
}
