@page "/communications/types/create"
@using SharedModels.DTOs
@using CommLifecycle.Web.Services
@inject MovieApiService _movieApiService
@inject NavigationManager _navigationManager
@rendermode InteractiveServer
@namespace CommLifecycle.Web.Components

<EditForm Model="@_communicationType" OnValidSubmit="HandleValidSubmit" FormName="create" Enhance>
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Name</label>
        <InputText @bind-Value="_communicationType.Name" class="form-control" />
    </div>

    <div class="mb-3">
      <p>Creation</p>
      @foreach (string status in creationStatuses)
      {
          <input type="checkbox" checked="@selectedStatuses.Contains(status)" @onchange="@(() => ToggleSelected(status))"/>
          <label>@status</label>
      }
      <p>Production</p>
      @foreach (string status in productionStatuses)
      {
          <input type="checkbox" checked="@selectedStatuses.Contains(status)" />
          <label>@status</label>
      }
      <p>Logistics</p>
      @foreach (string status in logisticsStatuses)
      {
          <input type="checkbox" checked="@selectedStatuses.Contains(status)" />
          <label>@status</label>
      }
    </div>

    <button class="btn btn-primary" type="submit">Add Communication Type</button>
</EditForm>


@code {
    private CommunicationTypeDto _communicationType = new();
    private List<string> selectedStatuses = [];
    private List<string> creationStatuses = ["ReadyForRelease", "Released"];
    private List<string> productionStatuses = ["QueuedForPrinting, Printed, Inserted, WarehouseReady"];
    private List<string> logisticsStatuses = ["Shipped", "InTransit", "Delivered", "Returned"];

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"communication title is {_communication.Title} and type id is {_communication.CommunicationTypeId} and regular ol' id is {_communication.Id}");
        await _movieApiService.CreateCommunicationAsync(_communication);
        _navigationManager.NavigateTo("/Communications");
    }

    private void ToggleSelected(string selected;)
    {
      if (selected.Contains(selected))
      {
        selected.Remove(selected);
      } else {
        selected.Add(selected);
      }
    }
}