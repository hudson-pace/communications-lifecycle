@page "/comments/edit"
@using Microsoft.EntityFrameworkCore
@using BlazorApp1.Models
@inject IDbContextFactory<BlazorWebApp.Data.BlazorWebAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Comment</h2>
<hr />
@if (Comment is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Comment" OnValidSubmit="UpdateComment" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Comment.Id" value="@Comment.Id" />
                <div class="mb-3">
                    <label for="content" class="form-label">Content:</label>
                    <InputText id="content" @bind-Value="Comment.Content" class="form-control" />
                    <ValidationMessage For="() => Comment.Content" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdat" class="form-label">CreatedAt:</label>
                    <InputDate id="createdat" @bind-Value="Comment.CreatedAt" class="form-control" />
                    <ValidationMessage For="() => Comment.CreatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Comment.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Comment.UpdatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="upvotes" class="form-label">Upvotes:</label>
                    <InputNumber id="upvotes" @bind-Value="Comment.Upvotes" class="form-control" />
                    <ValidationMessage For="() => Comment.Upvotes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="downvotes" class="form-label">Downvotes:</label>
                    <InputNumber id="downvotes" @bind-Value="Comment.Downvotes" class="form-control" />
                    <ValidationMessage For="() => Comment.Downvotes" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isedited" class="form-label">IsEdited:</label>
                    <InputCheckbox id="isedited" @bind-Value="Comment.IsEdited" class="form-check-input" />
                    <ValidationMessage For="() => Comment.IsEdited" class="text-danger" />
                </div>
                @*
                <div class="mb-3">
                    <label for="authorid" class="form-label">AuthorId:</label>
                    <InputText id="authorid" @bind-Value="Comment.AuthorId" class="form-control" />
                    <ValidationMessage For="() => Comment.AuthorId" class="text-danger" />
                </div>*@
                <div class="mb-3">
                    <label for="postid" class="form-label">PostId:</label>
                    <InputNumber id="postid" @bind-Value="Comment.PostId" class="form-control" />
                    <ValidationMessage For="() => Comment.PostId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/comments">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Comment? Comment { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Comment ??= await context.Comments.FirstOrDefaultAsync(m => m.Id == Id);

        if (Comment is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateComment()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Comment!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CommentExists(Comment!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/comments");
    }

    private bool CommentExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Comments.Any(e => e.Id == id);
    }
}
